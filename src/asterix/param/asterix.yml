drive_node:
  ros__parameters:
    wheels:
      separation: 0.244
      radius: 0.0405

    microcontroler:
      max_steps_frequency: 10000
      speedramp_resolution: 128

    speedramp:
      accel: 9.81 # 1g

    i2c_bus: 1

    joint_states_frame: "base_link"
    odom_frame: "odom"
    base_frame: "base_link"


sensors_node:
  ros__parameters:
    i2c_bus: 0

    base_frame: "base_link"


amcl_map_client:
  ros__parameters:
    use_sim_time: False


amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False


bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False


bt_navigator:
  ros__parameters:
    use_sim_time: False
    bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node


controller_server:
  ros__parameters:
    BaseObstacle:
      scale: 0.02
      sum_scores: false
    BaseObstacle/class: BaseObstacle
    GoalAlign:
      aggregation_type: last
      scale: 10.0
    GoalAlign/class: GoalAlign
    GoalDist:
      aggregation_type: last
      scale: 24.0
    GoalDist/class: GoalDist
    Oscillation:
      scale: 1.0
      x_only_threshold: 0.05
    Oscillation/class: Oscillation
    PathAlign:
      aggregation_type: last
      scale: 10.0
    PathAlign/class: PathAlign
    PathDist:
      aggregation_type: last
      scale: 32.0
    PathDist/class: PathDist
    RotateToGoal:
      scale: 16.0
    RotateToGoal/class: RotateToGoal
    acc_lim_theta: 2.0
    acc_lim_x: 0.2
    acc_lim_y: 0.0
    controller_frequency: 20.0
    # These plugins score the trajectories generated by the trajectory generator.
    # Multiple plugins can be loaded and the sum of their scores determines the
    # chosen command velocity.
    critics:
    - RotateToGoal
      # Only allows the robot to rotate to the goal orientation when it is sufficiently close to the goal location
    - Oscillation
      # Prevents the robot from just moving backwards and forwards.
    - BaseObstacle
      # Scores a trajectory based on where the path passes over the costmap.
      # To use this properly, you must use the inflation layer in costmap to
      # expand obstacles by the robot's radius.
    - ObstacleFootprint
      # Scores a trajectory based on verifying all points along the robot's
      # footprint don't touch an obstacle marked in the costmap.
    - GoalAlign
      # Scores a trajectory based on how well aligned the trajectory is with the goal pose.
    - PathAlign
      # Scores a trajectory based on how well it is aligned to the path provided by the global planner.
    - PathDist
      # Scores a trajectory based on how far it ends up from the path provided by the global planner.
    - GoalDist
      # Scores a trajectory based on how close the trajectory gets the robot to the goal pose.
    debug_trajectory_details: false
    decel_lim_theta: -2.0
    decel_lim_x: -0.2
    decel_lim_y: 0.0
    discretize_by_time: false
    goal_checker_name: dwb_plugins::SimpleGoalChecker
    local_controller_plugin: dwb_core::DWBLocalPlanner
    max_speed_xy: 0.40
    max_vel_theta: 1.0
    max_vel_x: 0.40
    max_vel_y: 0.0
    min_speed_theta: 0.0
    min_speed_xy: -0.40
    min_theta_velocity_threshold: 0.001
    min_vel_x: -0.40
    min_vel_y: 0.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    prune_distance: 1.0
    prune_plan: true
    publish_cost_grid_pc: false
    publish_evaluation: true
    publish_global_plan: true
    publish_local_plan: true
    publish_trajectories: true
    publish_transformed_plan: true
    trajectory_generator_name: dwb_plugins::StandardTrajectoryGenerator
    transform_tolerance: 0.2
    use_sim_time: true
    vx_samples: 10
    vy_samples: 0
    vtheta_samples: 0
    xy_goal_tolerance: 0.25
    yaw_goal_tolerance: 0.05


controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False


local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False
      global_frame: odom
      plugin_names: ["obstacle_layer", "inflation_layer"]
      plugin_types: ["nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.02
      robot_radius: 0.15
      inflation_layer.cost_scaling_factor: 3.0
      obstacle_layer:
        enabled: True
        scan:
          topic: /asterix/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
      observation_sources: scan
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False


global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: False
      robot_radius: 0.15
      obstacle_layer:
        enabled: True
        scan:
          topic: /asterix/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
      observation_sources: scan
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False


map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "map.yml"


planner_server:
  ros__parameters:
    allow_unknown: true
    planner_plugin: nav2_navfn_planner/NavfnPlanner
    tolerance: 0.0
    use_astar: false
    use_sim_time: true


planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False


robot_state_publisher:
  ros__parameters:
    use_sim_time: False
